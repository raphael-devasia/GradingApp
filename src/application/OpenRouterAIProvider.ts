
// import fetch from "node-fetch" 
// import { IAIProvider } from "../domain/repositories/ai-provider.interface"
// import { IAssignment } from "../domain/models/assignment.interface"

// export class OpenRouterAIProvider implements IAIProvider {
//     private readonly apiKey: string
//     private readonly apiUrl: string =
//         "https://openrouter.ai/api/v1/chat/completions"

//     constructor(apiKey: string) {
//         this.apiKey = apiKey
//     }


//     async generateAssignmentContent(
//         prompt: string,
//         assignmentDetails: Partial<IAssignment>,
//         fileContent?: string
//     ): Promise<Partial<IAssignment>> {
//         try {
//             const response = await fetch(this.apiUrl, {
//                 method: "POST",
//                 headers: {
//                     Authorization: `Bearer ${this.apiKey}`,
//                     "Content-Type": "application/json",
//                 },
//                 body: JSON.stringify({
//                     model: "deepseek/v3", 
//                     messages: [
//                         {
//                             role: "system",
//                             content:
//                                 "Generate assignment content in JSON format.",
//                         },
//                         { role: "user", content: prompt },
//                     ],
//                 }),
//             })
// console.log(response);

//             if (!response.ok) {
//                 throw new Error(`OpenRouter API error: ${response.statusText}`)
//             }

//             const data = await response.json()
//             const content = data.choices[0]?.message?.content

//             if (!content) {
//                 throw new Error("No content generated by the API")
//             }

//             // Parse the JSON content into Partial<IAssignment>
//             const generatedContent: Partial<IAssignment> = JSON.parse(content)
//             console.log(generatedContent)
            

//             return generatedContent
//         } catch (error) {
//             console.error("Error generating content with OpenRouter:", error)
//             throw new Error("Failed to generate assignment content")
//         }
//     }
// }
import fetch from "node-fetch"
import { IAIProvider } from "../domain/repositories/ai-provider.interface"
import { IAssignment } from "../domain/models/assignment.interface"

export class OpenRouterAIProvider implements IAIProvider {
    private readonly apiKey: string
    private readonly apiUrl: string =
        "https://openrouter.ai/api/v1/chat/completions"
    private readonly models: string[] = [
        "deepseek/seed",
        "mistralai/mixtral-8x7b-instruct",
    ]
    private readonly defaultParams = {
        temperature: 0.7,
        max_tokens: 2000,
    }

    constructor(apiKey: string) {
        this.apiKey = apiKey
    }

    async generateAssignmentContent(
        prompt: string,
        assignmentDetails: Partial<IAssignment>,
        fileContent?: string
    ): Promise<Partial<IAssignment>> {
        let lastError: Error | null = null

        for (const model of this.models) {
            try {
                console.log(
                    `Attempting to generate assignment with model: ${model}`
                )
                const result = await this.tryModel(
                    model,
                    prompt,
                    assignmentDetails,
                    fileContent
                )
                console.log(`‚úÖ Success with model ${model}`)
                return result
            } catch (error) {
                console.warn(`‚ö†Ô∏è Model ${model} failed:`, error)
                lastError =
                    error instanceof Error ? error : new Error(String(error))
                continue
            }
        }

        throw new Error(
            `‚ùå All models failed. Last error: ${
                lastError?.message || "Unknown error"
            }`
        )
    }

    private async tryModel(
        model: string,
        prompt: string,
        assignmentDetails: Partial<IAssignment>,
        fileContent?: string
    ): Promise<Partial<IAssignment>> {
        const headers = {
            Authorization: `Bearer ${this.apiKey}`,
            "Content-Type": "application/json",
            "HTTP-Referer": "http://localhost:5050",
            "X-Title": "Assignment Generator",
        }

        const body = {
            model,
            messages: [
                {
                    role: "system",
                    content: `You are an AI assistant that generates educational assignments in JSON format. 
          The output must match this structure: ${JSON.stringify({
              ...assignmentDetails,
              instructions: "string",
              rubric: "string",
              questions: "string",
              answerKey: "string",
              checklist: "string",
              participationCriteria: "string",
              peerEvaluation: "string",
          })}. Ensure fields like rubric, questions, answerKey, checklist, participationCriteria, and peerEvaluation are returned as JSON strings or formatted text, not nested objects.`,
                },
                {
                    role: "user",
                    content: `${prompt}${
                        fileContent
                            ? `\n\nAdditional context:\n${fileContent}`
                            : ""
                    }`,
                },
            ],
            response_format: { type: "json_object" },
            ...this.defaultParams,
        }

        console.debug(
            `üì§ Request to OpenRouter for model ${model}:`,
            JSON.stringify(body, null, 2)
        )
        console.log("üîê Authorization header:", headers.Authorization)

        try {
            const response = await fetch(this.apiUrl, {
                method: "POST",
                headers,
                body: JSON.stringify(body),
            })

            let responseData
            try {
                responseData = await response.json()
            } catch (e) {
                const responseText = await response.text()
                throw new Error(`Non-JSON response from API: ${responseText}`)
            }

            console.debug(
                `üì• Response from model ${model}:`,
                JSON.stringify(responseData, null, 2)
            )

            if (!response.ok) {
                const error = responseData.error || {}
                if (
                    error.code === 400 &&
                    error.message?.includes("not a valid model ID")
                ) {
                    throw new Error(
                        `Invalid model ID: ${model}. Please verify with OpenRouter.`
                    )
                } else if (error.code === 401) {
                    throw new Error(
                        "Invalid API key. Check OPENROUTER_API_KEY."
                    )
                } else if (error.code === 429) {
                    throw new Error("Rate limit exceeded. Try again later.")
                } else if (error.code === 403) {
                    throw new Error(
                        `Insufficient credits or permissions for model: ${model}`
                    )
                }
                throw new Error(
                    `OpenRouter API error: ${
                        response.status
                    } - ${JSON.stringify(error)}`
                )
            }

            const content = responseData.choices[0]?.message?.content
            if (!content) {
                throw new Error(`Model ${model} returned empty content`)
            }

            try {
                let parsedContent = JSON.parse(content) as Partial<IAssignment>
                // Ensure fields are strings
                const stringFields: (keyof IAssignment)[] = [
                    "rubric",
                    "questions",
                    "answerKey",
                    "checklist",
                    "participationCriteria",
                    "peerEvaluation",
                ]
                for (const field of stringFields) {
                    if (
                        parsedContent[field] &&
                        typeof parsedContent[field] !== "string"
                    ) {
                        parsedContent[field] = JSON.stringify(
                            parsedContent[field],
                            null,
                            2
                        ) as any
                    }
                }
                return parsedContent
            } catch (parseError) {
                console.error(
                    `‚ùó Failed to parse JSON from model ${model}:`,
                    content
                )
                throw new Error(`Model ${model} returned invalid JSON`)
            }
        } catch (error) {
            throw new Error(
                `Failed to generate content with model ${model}: ${
                    error instanceof Error ? error.message : String(error)
                }`
            )
        }
    }

    async getAvailableModels() {
        try {
            const response = await fetch(
                "https://openrouter.ai/api/v1/models",
                {
                    headers: {
                        Authorization: `Bearer ${this.apiKey}`,
                    },
                }
            )

            if (!response.ok) {
                throw new Error(
                    `Failed to fetch models: ${response.statusText}`
                )
            }

            const data = await response.json()
            return data.data
        } catch (error) {
            console.error("Error fetching available models:", error)
            throw new Error(
                "Failed to retrieve available models from OpenRouter"
            )
        }
    }
}